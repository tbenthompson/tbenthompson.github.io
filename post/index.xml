<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>New posts from T. Ben Thompson</title><link>https://tbenthompson.com/post/</link><description>Recent content from tbenthompson.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://tbenthompson.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Dreaming with sparse autoencoder features</title><link>https://tbenthompson.com/post/sae_dreamy/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/sae_dreamy/</guid><description>&lt;p>&lt;a href="https://confirmlabs.org/posts/sae_dream.html">This is a link post for a tutorial on using dreaming (aka feature visualization) on sparse autoencoder features. I did this while I was at Confirm Labs.&lt;/a>&lt;/p></description></item><item><title>Fluent student-teacher redteaming</title><link>https://tbenthompson.com/post/flrt/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/flrt/</guid><description>&lt;p>&lt;a href="https://confirmlabs.org/posts/flrt.html">This is a link post for work I did on highly effective white-box adversarial attacks on large language models at Confirm Labs.&lt;/a>&lt;/p></description></item><item><title>Breaking circuit breakers</title><link>https://tbenthompson.com/post/circuit_breaking/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/circuit_breaking/</guid><description>&lt;p>&lt;a href="https://confirmlabs.org/posts/circuit_breaking.html">This is a link post for work I did on redteaming and analyzing the circuit breakers method for defending language models against adversarial attacks. I did this while I was at Confirm Labs.&lt;/a>&lt;/p></description></item><item><title>Fluent dreaming for language models (AI interpretability method)</title><link>https://tbenthompson.com/post/dreamy/</link><pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/dreamy/</guid><description>&lt;p>My coworkers at Confirm Labs and I recently posted a paper on fluent dreaming for language models! &lt;a href="https://arxiv.org/abs/2402.01702">arXiv link.&lt;/a>
We have a &lt;a href="https://confirmlabs.org/posts/dreamy.html">companion page here demonstrating the code&lt;/a>. We also have &lt;a href="https://colab.research.google.com/drive/1B0dM7du91BUkT7tSICXjKL7lrBAEdSa-?usp=sharing">a demo Colab notebook here&lt;/a>.&lt;/p>
&lt;p>Dreaming, aka &amp;ldquo;feature visualization,&amp;rdquo; is a interpretability approach popularized by DeepDream that involves optimizing the input of a neural network to maximize an internal feature like a neuron&amp;rsquo;s activation. We adapt dreaming to language models.&lt;/p>
&lt;p>Past dreaming work almost exclusively works with vision models because the inputs are continuous and easily optimized. Language model inputs are discrete and hard to optimize. To solve this issue, we adapted techniques from the adversarial attacks literature (GCG, &lt;a href="https://arxiv.org/abs/2307.15043">Zou et al 2023&lt;/a>). Our algorithm, Evolutionary Prompt Optimization (EPO), optimizes over a Pareto frontier of activation and fluency:&lt;/p></description></item><item><title>Extreme website and app blocking</title><link>https://tbenthompson.com/post/lots_of_blocks/</link><pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/lots_of_blocks/</guid><description>&lt;p>Computers are awesome. Also computers really suck… the time out of my day. The same goes for phones and tablets and anything that can access the internet. I&amp;rsquo;ve been addicted to way too many different internet activities: Reddit, TV, Instagram, Twitter, Hackernews, product reviews, travel blogs, tech blogs, the EA forum, etc, etc, etc. Even Wikipedia can be a huge time sink for me!&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> Maybe I have less self control or less willpower than others?&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> Regardless, my internet time wasting got pretty bad over the years. Working from home during the pandemic finally set me off a cliff where I realized I &lt;em>really&lt;/em> needed to solve the problem.&lt;/p></description></item><item><title>Some thoughts on my ideal publication system.</title><link>https://tbenthompson.com/post/ideal_publication/</link><pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/ideal_publication/</guid><description>&lt;p>Two common users of the scientific literature:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>The newbie/shallow learner&lt;/strong>: they are just getting into a field and need to understand some subject.&lt;/li>
&lt;li>&lt;strong>The deep researcher&lt;/strong>: they spend their days doing research in this area and need to keep up to date with what other researchers are doing.&lt;/li>
&lt;/ul>
&lt;p>Currently, the scientific literature doesn’t really satisfy either type of user:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Newbies need more review articles and textbooks.&lt;/strong> These are often not available for concepts and research from the last 10 years. Review articles are currently quite rare especially for new or fast moving fields and are not well incentivized by the career process. They are normally written by altruistic, often tenured, senior researchers&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Textbooks are similar.&lt;/p></description></item><item><title>Unexpectedly sucky things I've noticed about grad school</title><link>https://tbenthompson.com/post/grad_school/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/grad_school/</guid><description>&lt;p>Summary: I think graduate school is largely a mistake for everyone involved.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> Graduate students are poorly paid, low-skill but high potential, junior employees who need a lot more supervision and mentorship.&lt;/p>
&lt;p>Problems:&lt;/p>
&lt;ol>
&lt;li>Graduate students in many fields are thrust into a role where they need to decide on a research direction. Developing research taste is difficult and expecting graduate students to succeed at this is a great way to be disappointed.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>In the lab sciences, it seems less common to need to choose your own research direction. But, you still need to attach yourself to a particular lab.&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> And the choice of lab will have huge ramifications for the value of your work and your career prospects. So, the situation is actually worse than in fields that require research taste, because you’re forced to make this single high consequence decision right at the beginning of grad school when you have the least knowledge and experience to make a good decision.&lt;/li>
&lt;li>Very few other people have strong incentives to help graduate students succeed. It&amp;rsquo;s often necessary to be pushy and ask for help or feedback.&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> By comparison, in many other jobs, your coworkers depend on your work and are constantly asking you about it. This lack of aligned incentives in grad school can also lead to habits that are counterproductive in future careers, like under-communicating, having an overly adversarial or transactional mindset, or sometimes solving problems by being dogged and pushy rather than just finding a more solvable problem or a work-around.&lt;/li>
&lt;li>Students rarely have effective managers or mentors. Even a small amount of explicit management effort goes a long way.&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> Effective managers and mentors are common in the private sector, and people with a bad manager can just switch jobs.&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Some first year graduate students are fully prepared for the independence and challenge of professional research and do a phenomenally good job. Graduate school is failing these students too because there&amp;rsquo;s almost no way to promote them quickly into a position of power and influence!&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup> Sometimes 24 year olds successfully start massively successful companies. It seems that some 24 year olds should also be well funded principal investigators.&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Students are paid an arbitrary rate completely unconnected to their market rate as researchers. &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup> Some fields have high industry earning potential and students have two month summer internships that pay more than the student receives for the entire rest of the year. This filters for students that are already financially well off. Other fields have very little industry earning potential. This &lt;em>really&lt;/em> filters for financially secure students.&lt;/li>
&lt;li>This rate is also unconnected to how much their advisor/manager values them. Good students are rewarded by eventually getting tenure 15 years later. This is silly.&lt;/li>
&lt;li>Graduate students are locked into this pay rate for 4-8 years, a time frame during which their skills have increased massively and they could have (easily) more than doubled their income in the private sector.&lt;/li>
&lt;li>Graduate students are normally not able to move between labs. It&amp;rsquo;s not uncommon for someone to hop between two or three jobs over a few years before settling into one that turns out to be a good fit for a longer time frame. This is basically impossible in graduate school where switching advisors is difficult, much less switching universities!&lt;/li>
&lt;li>When graduate students leave a lab, their projects often die because many graduate students are working on a solo project. This is a significant drag on research progress.&lt;/li>
&lt;li>Graduate school is notoriously bad for mental health. &lt;a href="https://www.valentinbolotnyy.com/publication/graduatementalhealth/">This paper by Val Bolotnyy&lt;/a> presents evidence that “24.8% experience moderate or severe symptoms of depression or anxiety - more than two times the population average.”&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup> This is almost surely exacerbated by the above issues. It’s hard to feel good about yourself when it seems like you’re working extremely hard on problems that no one else is really invested in.&lt;/li>
&lt;li>There’s a lot of potential for abuse. Students often can’t leave a research team or university during grad school without completely leaving academia or switching fields. Students on visas are particularly vulnerable because they can’t leave their program without completely leaving the United States.&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>&lt;/li>
&lt;/ol>
&lt;p>The thing that ameliorates some of these problems a little is that most graduate students are smart and hard-working. But, this also makes some of the issues regarding mental health and poor management worse because students regularly burn out. There’s a strong stigma against &amp;ldquo;quitting&amp;rdquo; that plays right into the diligent attitude of many grad students. By contrast, in the tech/software engineering world I’ve worked in since grad school, everyone is constantly encouraging friends in bad jobs to quit.&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>&lt;/p></description></item><item><title>FAQ: Why should research scientists be at the center of our scientific workforce?</title><link>https://tbenthompson.com/post/reasons_for_research_scientists/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/reasons_for_research_scientists/</guid><description>&lt;p>&lt;sub>Ideally, this will be a living document. I just hit publish on this because I&amp;rsquo;m impulsive but it probably needs some serious editing. This was last updated on 1/7/2022.&lt;/sub>&lt;/p>
&lt;p>In most research settings, research scientists are the central characters. In industrial research, experienced research scientists and engineers are well paid and prestigious. In national labs, the main career path is as a research scientist. But in academia, research scientists are few and far between. In many fields, a faculty-as-manager paradigm dominates and the most experienced scientists are engaged in the management responsibilities of the modern professor. Instead, most research is executed on by graduate students.&lt;/p></description></item><item><title>We need technical research consultants.</title><link>https://tbenthompson.com/post/technical_research_consulting/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/technical_research_consulting/</guid><description>&lt;h5 id="prelude-research-scientists-and-research-consultants">Prelude: Research scientists and research consultants.&lt;/h5>
&lt;p>&lt;sub>This is a proposal for a new type of research organization that would provide technical support, particularly on things like lab equipment or computational methods or software: technical competencies that take a long time to develop and are mostly independent of the particular lab environment.&lt;/sub>&lt;/p>
&lt;p>&lt;sub>There&amp;rsquo;s a spectrum of hands-on technical researchers. On the one hand, research scientists are full-time technically talented team members that execute on research plans. They have deep knowledge of the research in the lab and can help maintain continuity and keep execution speed high. On the other end of the specrum, research consultants are briefly involved in many different projects. Research consultants are valuable less for their deep knowledge of a particular research agenda and more for a particular skill that they have developed to a high degree. Ultimately, I think we need many more research scientists than research consultants. But right now, we have too few of both.&lt;/sub>&lt;/p></description></item><item><title>Open source release! Generalized linear modeling with glum and tabmat.</title><link>https://tbenthompson.com/post/glum_tabmat/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/glum_tabmat/</guid><description>&lt;p>I&amp;rsquo;m super excited to announce the release of &lt;a href="https://github.com/Quantco/glum/">glum&lt;/a> and &lt;a href="https://github.com/Quantco/tabmat/">tabmat&lt;/a>. These are the first two open source projects that QuantCo has released! Hopefully there will be many more. &lt;code>glum&lt;/code> is a efficient and featureful Python-first library for generalized linear model (GLM) estimation built with an sklearn-style API. We focused a ton on correctness, performance and satisfying a wide range of feature requirements.&lt;/p>
&lt;p>While working on this project, my coworkers and I heard repeatedly from folks on other data science or economics teams that they either struggled with the same GLM software problems we had or they had built their own internal GLM tool similar to &lt;code>glum&lt;/code>. I&amp;rsquo;m really happy to be able to help rectify this situation and release something that the whole community can use.&lt;/p></description></item><item><title>50 suggestions on correctness and testing for scientific software for PDEs</title><link>https://tbenthompson.com/post/testing_scientific_software/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/testing_scientific_software/</guid><description>&lt;p>I think testing and debugging is one of the harder aspects of scientific and numerical software. It&amp;rsquo;s easy to get buried in giant pile of code and have no idea where to look for bugs. It&amp;rsquo;s even harder when actually the bug isn&amp;rsquo;t in the code but is in the concepts, math or data.&lt;/p>
&lt;p>The fundamental problem with testing and debugging scientific software is that we don&amp;rsquo;t know correct intermediate values or even the correct final output. &lt;a href="https://tbenthompson.com/post/automated_testing_for_science/">I helped write a previous post on similar topics&lt;/a> but I wanted to write more on the topic. So, here are various suggestions that probably would&amp;rsquo;ve helped me at some point. I&amp;rsquo;d like to expand quite a bit more on individual points here in the future.&lt;/p></description></item><item><title>Gaussian quadrature is not optimal</title><link>https://tbenthompson.com/post/better_than_gauss/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/better_than_gauss/</guid><description>&lt;p>It&amp;rsquo;s conventional wisdom that Gaussian quadrature is the most point-efficient quadrature formula for analytic functions. But, it&amp;rsquo;s not true! &lt;a href="http://www.cs.ox.ac.uk/files/731/NA-07-15.pdf">&amp;ldquo;New quadrature formulas from conformal maps&amp;rdquo; by Hale and Trefethen (2008)&lt;/a> demonstrates that it&amp;rsquo;s possible to have quadrature formulas that converge about 50% faster for analytic functions. The paper is quite accessible and I encourage you to read it, but I also wanted to help bring attention to it since it seems like it should be more well-known.&lt;/p></description></item><item><title>Reflective deep work</title><link>https://tbenthompson.com/post/reflective_deep_work/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/reflective_deep_work/</guid><description>&lt;p>&lt;sub>You might also call this introspective deep work, or self-reflective deep work.&lt;/sub>&lt;/p>
&lt;p>I just finished reading &lt;a href="https://www.goodreads.com/book/show/25744928-deep-work">Deep Work&lt;/a> and it has me thinking about applying a few of the concepts well beyond my career. &amp;ldquo;Deep work&amp;rdquo; is all about making space for the hard intellectual work at the core of most knowledge workers&amp;rsquo; jobs. But, the concept of making space in your day or week or month for deep thought seems like it should apply well beyond my career. Reflective deep work could even be a unifying theme for a lot of self-help or productivity advice. In some parts of life, I operate on auto-pilot almost all the time. If I&amp;rsquo;m brushing my teeth, that&amp;rsquo;s perfect. But, in other situations, it would be better to occasionally stop and think.&lt;/p></description></item><item><title>Why it's okay to share your code</title><link>https://tbenthompson.com/post/share_your_code/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/share_your_code/</guid><description>&lt;p>TL;DR: If you write a paper that involves complex code, share your code freely online. Don&amp;rsquo;t make it pretty. Don&amp;rsquo;t make it easy to use. Refuse to support the code. Just share it!&lt;/p>
&lt;p>People have talked a lot already about why it&amp;rsquo;s a good idea to share code with your research. I want to address a specific component of this. The desire to share good, well-maintained code often becomes a barrier to sharing any code at all. So, here, I&amp;rsquo;d just like to say that we love you, and we love your code too. No matter what it looks like.&lt;/p></description></item><item><title>Maintaining momentum</title><link>https://tbenthompson.com/post/maintaining_momentum/</link><pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/maintaining_momentum/</guid><description>&lt;h3 id="collaboration-in-an-unstructured-world">Collaboration in an unstructured world&lt;/h3>
&lt;p>While I haven&amp;rsquo;t made any decisions yet, I&amp;rsquo;m currently considering heading off into a much less structured career path which could be variously described as &amp;ldquo;independent scientist&amp;rdquo;, &amp;ldquo;entrepreneuer&amp;rdquo;, &amp;ldquo;contractor&amp;rdquo; or &amp;ldquo;self-employed open-source developer&amp;rdquo;. Along those lines, I&amp;rsquo;ve been wondering what makes work good for me and how I can put the pieces together reliably. I think the critical piece will be to proactively communicate with lots of people.&lt;/p></description></item><item><title>Maybe we should stop using planar triangles for fault modeling</title><link>https://tbenthompson.com/post/surface_representation/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/surface_representation/</guid><description>&lt;p>Let&amp;rsquo;s consider a model problem where the goal is to calculate the stress on a fault due to some slip on that fault. We also include a topographic free surface. How should we model this surface?&lt;/p>
&lt;p>Should we use planar triangles to model a curved fault? What happens at the junction between two triangles? If we do the natural fault thing and require the slip to be tangential to the suface, the slip vector has a step function at the junction between the two triangles. This must be true because the two triangles have different normal vectors and tangent vectors. On the other hand, if we force slip to be continuous across triangles, we have to allow non-tangential slip because at an edge where two triangles meet the slip vector has to be identical but the tangent vectors are different.&lt;/p></description></item><item><title>Cool video of Cascadia earthquake cycle simulations</title><link>https://tbenthompson.com/post/cascadia/</link><pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/cascadia/</guid><description>&lt;iframe width="600" height="338" src="https://www.youtube.com/embed/ieN-9MUhND8?start=112" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe></description></item><item><title>130 million triangular dislocations per second with Python/CUDA</title><link>https://tbenthompson.com/post/cutde/</link><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/cutde/</guid><description>&lt;p>&lt;a href="https://github.com/tbenthompson/cutde">See the GitHub repo&lt;/a>&lt;/p></description></item><item><title>CLUDA - Write once, run anywhere with both CUDA and OpenCL.</title><link>https://tbenthompson.com/post/cluda/</link><pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/cluda/</guid><description>&lt;p>&lt;a href="https://github.com/tbenthompson/cluda">See the GitHub repo&lt;/a>&lt;/p></description></item><item><title>Regularizing rate and state friction for numerical simulation</title><link>https://tbenthompson.com/post/regularized_rate_state/</link><pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/regularized_rate_state/</guid><description>&lt;p>The standard form for rate and state friction produces undefined results for $V = 0$. Some algebra and calculus and microphysics lead to the commonly used regularized form that is still valid at $V=0$. This is based on the presentation in Rice and Ben-Zion 1996 and Lapusta et. al 2000. There&amp;rsquo;s nothing novel here, but the details of this sort of thing are often glossed over in the literature. So, while working it out for myself, I figured I&amp;rsquo;d write it up!&lt;/p></description></item><item><title>A quasidynamic spring block slider</title><link>https://tbenthompson.com/post/block_slider/</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/block_slider/</guid><description>&lt;p>&lt;em>source available &lt;a href="block_slider.ipynb">here&lt;/a>&lt;/em>&lt;/p>
&lt;p>Figures first, explanations later!&lt;/p>
&lt;img src="qd_1d.png" alt="Evolution of a quasidynamic spring-block-slider system."/>
&lt;p>Recently, I&amp;rsquo;ve been working on some 3D quasidynamic earthquake modeling problems. We&amp;rsquo;re planning to add in some realistic geometries using tectosaur to see what influence that has on the earthquake cycle. While putting together that 3D model, I realized that it consists of two main pieces:&lt;/p>
&lt;ul>
&lt;li>The numerical methods for determining traction on the fault surface given the current values of slip everywhere on the fault (elasticity!)&lt;/li>
&lt;li>The frictional evolution for determining the current velocity on the fault surface from the traction.&lt;/li>
&lt;/ul>
&lt;p>Or, in pseudocode, it&amp;rsquo;s a simple feedback where I loop:&lt;/p></description></item><item><title>Cloudpickle, serializing functions and monkey patching</title><link>https://tbenthompson.com/post/cloudpickle_monkey_patching/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/cloudpickle_monkey_patching/</guid><description>&lt;p>I&amp;rsquo;ve been using &lt;code>cloudpickle&lt;/code> in the internals of &lt;a href="https://github.com/tbenthompson/taskloaf">taskloaf&lt;/a> for a while since it allows serializing almost all functions and objects. That&amp;rsquo;s really nice since it means I can pass arbitrary functions (tasks, jobs) from one worker to another across the network.&lt;/p>
&lt;p>Yesterday, I was curious about the internals of &lt;code>cloudpickle&lt;/code> and whether a monkey-patched object would remain patched after being loaded remotely. I read a bit of the source, but figured just trying it was a good idea.&lt;/p></description></item><item><title>My Python testing set up</title><link>https://tbenthompson.com/post/how_i_test/</link><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/how_i_test/</guid><description>&lt;p>To follow up on the last post about testing for science and data analytics, I thought it&amp;rsquo;d be nice to talk about the specific tools I use for testing. I don&amp;rsquo;t claim this is the best way to do things, but it tends to work pretty well for small projects and teams.&lt;/p>
&lt;h2 id="pytest">py.test&lt;/h2>
&lt;p>The py.test tool is handy for running a suite of tests in python. It&amp;rsquo;s a very general tool for running all the tests in a project. It can do a lot of powerful things, but requires almost no boilerplate to get started with. The pattern I&amp;rsquo;ve always followed is: Add a &lt;code>tests&lt;/code> directory the root of the project. Name any test files in that directory &lt;code>test_xyz.py&lt;/code> and then any tests within that file &lt;code>def test_abc():&lt;/code>. py.test will find all of these automatically and run them. On several projects that I work on, I have tens or hundreds of tests that, in total, take less than a second to run. As a result, I simply run &lt;code>py.test&lt;/code> every time I make a change.&lt;/p></description></item><item><title>Automated testing for scientists and data analysts</title><link>https://tbenthompson.com/post/automated_testing_for_science/</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/automated_testing_for_science/</guid><description>&lt;p>A lot of scientists and data analysts don&amp;rsquo;t use automatic test suites for verifying their code.
And I think that&amp;rsquo;s because it&amp;rsquo;s really hard.
Almost all the introductions to automated testing that I&amp;rsquo;ve seen come from a more typical software engineering perspective. They assume you already know exactly what the output of your code should be.
And the trouble with science is that that&amp;rsquo;s rarely the case.
I mean, if you knew the results ahead of time, you wouldn&amp;rsquo;t be doing science!&lt;/p></description></item><item><title>Sneaky (transparent) huge pages</title><link>https://tbenthompson.com/post/sneaky-transparent-huge-pages/</link><pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/sneaky-transparent-huge-pages/</guid><description/></item><item><title>Sparse n-body matrices</title><link>https://tbenthompson.com/post/sparse_nbody/</link><pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/sparse_nbody/</guid><description>&lt;p>&lt;img src="https://tbenthompson.com/images/sparse_treecode_matrix.png" alt="matrix">&lt;/p>
&lt;p>This is a sparsity plot of a matrix representing an approximate n-body interaction. The black dots are non-zeros in the matrix. Imagine 2000 stars, each exerting some gravitational pull on each of the other stars. This gravitational interaction could be represented by a dense matrix:&lt;/p>
&lt;p>$$
A_{ij} = \frac{G m_i m_j}{|\mathbf{x}_i - \mathbf{x}_j|^2}
$$&lt;/p>
&lt;p>This works, but dense matrices can be slow when there are many stars. The cost of evaluating a matrix-vector product will scale like $O(n^2)$. Fortunately, the matrix can be represented in a different way if a little bit of error is okay. The interactions can be separated into those between nearby stars and the remaining interactions between stars that are far from each other. Groups of farfield interactions can be approximated. The result is a matrix that looks like what I&amp;rsquo;m showing above. The matrix has four distinct blocks. The upper left 2000x2000 block of the matrix represents the direct interaction that could not be approximated. The lower left and lower right represent the evaluation of the approximation coefficients. Both are super sparse! The upper right is the evaluation of the influence of the approximation coefficients on the points themselves. This part is less sparse.&lt;/p></description></item><item><title>"Serializing" a function in C++</title><link>https://tbenthompson.com/post/serialize_fnc_cpp/</link><pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/serialize_fnc_cpp/</guid><description>&lt;script src="https://gist.github.com/tbenthompson/94fd4095f89da23dec20.js">&lt;/script></description></item><item><title>Setting up my website</title><link>https://tbenthompson.com/post/setting_up_website/</link><pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate><guid>https://tbenthompson.com/post/setting_up_website/</guid><description>&lt;p>I have a website now. Since technical stuff is fun, I thought I&amp;rsquo;d share the way I set it up.&lt;/p>
&lt;p>The site is a set of statically served HTML pages. &lt;a href="https://gohugo.io/">Hugo&lt;/a> makes this really easy. Hugo is super fast and is written in Go. You can set up a few template pages and then write posts and pages in Markdown. Some layout is also done using Go templates. Running Hugo takes your templates and pages and concerts them into static HTML. The pages can then be dropped into any web accessible folder and accessed remotely. This is nice, but a few additional steps makes everything even easier:&lt;/p></description></item></channel></rss>